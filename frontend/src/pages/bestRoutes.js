import React, { useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import '../styles/App.css';
import RouteInfo from '../components/RouteInfo';
import { Loader } from 'google-maps';


function convertCoords(coordsResponse){
  const coordsList = coordsResponse["coordinates"];

  let convertedCoords = [];

  for (let index = 0; index < coordsList.length; index++) {
    const coords = coordsList[index];
    convertedCoords.push({ lat: coords[1], lng: coords[0] });
  }

  return convertedCoords;
}

async function initMap(coordinates) {

  const options = {/* todo */ };
  const apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;
  const loader = new Loader(apiKey, options);
  
  const google = await loader.load();
	const el = document.getElementById("map");
  const map = new google.maps.Map(el, {
    zoom: 11,
    center: { lat: 54.46, lng: 18.46 }
  });

  const flightPath = new google.maps.Polyline({
    path: coordinates,
    geodesic: true,
    strokeColor: "#0f4685",
    strokeOpacity: 1.0,
    strokeWeight: 4,
  });

  flightPath.setMap(map);
}

const BestRoutes = () => {

	var location = useLocation();
	const bestRoutes = location.state;

  useEffect(() => {
        function fetchData() {

          if (bestRoutes !== undefined && bestRoutes.length > 0) {
            const mockResponse = {"coordinates":[[18.46024,54.54115],[18.46024,54.54114],[18.46014,54.54099],[18.4601,54.54092],[18.46004,54.54084],[18.4599,54.54063],[18.4597,54.54031],[18.45963,54.54022],[18.45956,54.54009],[18.45955,54.54008],[18.45935,54.53975],[18.45934,54.53972],[18.45931,54.53966],[18.4593,54.53964],[18.45917,54.53942],[18.45914,54.53938],[18.45904,54.53921],[18.45902,54.53917],[18.45899,54.53912],[18.45889,54.53897],[18.45869,54.53863],[18.45851,54.53831],[18.45843,54.53816],[18.45833,54.53798],[18.45827,54.53782],[18.45821,54.53774],[18.45818,54.53767],[18.4581,54.53753],[18.45807,54.53747],[18.45798,54.53724],[18.45792,54.5371],[18.45772,54.53639],[18.45767,54.53624],[18.45766,54.53617],[18.45764,54.53613],[18.45757,54.53601],[18.45749,54.5359],[18.45742,54.53582],[18.45742,54.5358],[18.45734,54.53574],[18.4573,54.53571],[18.45724,54.53568],[18.45707,54.53558],[18.45703,54.53556],[18.45676,54.53546],[18.45642,54.53537],[18.45595,54.53529],[18.45592,54.53529],[18.45578,54.53524],[18.45571,54.53522],[18.45565,54.53519],[18.4556,54.53517],[18.45557,54.53516],[18.45544,54.53509],[18.45524,54.53498],[18.45512,54.53491],[18.45493,54.5348],[18.45487,54.53476],[18.45484,54.53475],[18.45482,54.53474],[18.45472,54.53467],[18.45462,54.53461],[18.45457,54.53459],[18.45456,54.53458],[18.45442,54.5345],[18.45441,54.53449],[18.45439,54.53447],[18.45423,54.53438],[18.45421,54.53437],[18.45412,54.53432],[18.45405,54.53428],[18.4539,54.53419],[18.45377,54.53412],[18.45375,54.53411],[18.45365,54.53405],[18.45351,54.53397],[18.45339,54.5339],[18.45327,54.53382],[18.4532,54.53378],[18.45302,54.53369],[18.45297,54.53366],[18.45276,54.53356],[18.45272,54.53354],[18.45267,54.53352],[18.45261,54.53349],[18.45248,54.53344],[18.45246,54.53344],[18.45227,54.53336],[18.45219,54.53333],[18.45204,54.53328],[18.45193,54.53325],[18.45175,54.53319],[18.45163,54.53315],[18.45134,54.53305],[18.4511,54.53298],[18.45104,54.53295],[18.45102,54.53295],[18.45087,54.5329],[18.45084,54.53288],[18.45074,54.53284],[18.45063,54.5328],[18.45024,54.53289],[18.44991,54.53297],[18.44983,54.53299],[18.44967,54.53303],[18.44955,54.53306],[18.4493,54.53313],[18.44927,54.53314],[18.44881,54.53324],[18.44858,54.5333],[18.44829,54.53336],[18.4482,54.53337],[18.44793,54.53342],[18.44784,54.53344],[18.44751,54.5335],[18.44748,54.5335],[18.4471,54.53358],[18.44689,54.53363],[18.44676,54.53366],[18.44654,54.53372],[18.44634,54.53377],[18.44605,54.53388],[18.4458,54.53397],[18.44575,54.53399],[18.44524,54.5342],[18.4448,54.53437],[18.44478,54.53438],[18.44477,54.53439],[18.44432,54.5346],[18.44371,54.53491],[18.4437,54.53491],[18.44368,54.53492],[18.44365,54.53493],[18.4429,54.53533],[18.44282,54.53537],[18.44277,54.5354],[18.44274,54.53542],[18.44251,54.53554],[18.44244,54.53557],[18.44242,54.53558],[18.44202,54.5358],[18.44197,54.53582],[18.44192,54.53585],[18.44135,54.53615],[18.44117,54.53625],[18.44101,54.53633],[18.44039,54.53666],[18.44007,54.53682],[18.43999,54.53687],[18.43975,54.53701],[18.43962,54.53708],[18.43955,54.53716],[18.43954,54.53718],[18.43945,54.53729],[18.43943,54.53733],[18.43936,54.53747],[18.43924,54.53772],[18.4392,54.5378],[18.43915,54.53789],[18.4391,54.53795],[18.43903,54.53804],[18.43897,54.53811],[18.43895,54.53812],[18.4389,54.53817],[18.43887,54.53818],[18.43877,54.53826],[18.43864,54.53834],[18.4386,54.53837],[18.43848,54.53842],[18.43831,54.5385],[18.43814,54.53856],[18.43796,54.53861],[18.43771,54.53866],[18.43751,54.53871],[18.43743,54.53873],[18.43652,54.53891],[18.43649,54.53891],[18.43641,54.53892],[18.4363,54.53894],[18.43607,54.53897],[18.43585,54.539],[18.43573,54.53901],[18.43557,54.53902],[18.43531,54.53904],[18.43498,54.53905],[18.43481,54.53905],[18.43422,54.53905],[18.43405,54.53905],[18.43399,54.53906],[18.43393,54.53908],[18.43388,54.53912],[18.43385,54.53917],[18.43384,54.53921],[18.43386,54.53925],[18.43388,54.53929],[18.43394,54.53935],[18.43402,54.53938],[18.4341,54.53939],[18.43419,54.53938],[18.4343,54.53937],[18.43438,54.53935],[18.43454,54.53927],[18.43484,54.5391],[18.43498,54.53905]],"properties":{"date":"2023-01-15","routeId":10606,"tripId":371},"type":"LineString"};
            // should work - leave date as it is
            fetch(`https://ckan2.multimediagdansk.pl/shapes?date=2023-01-15&routeId=${bestRoutes[0].routeId}&tripId=${bestRoutes[0].tripId}`)
            .then(res => res.json())
            .then(res => initMap(convertCoords(mockResponse)))
            .catch(error => console.log(error));
            
          }
		}
		fetchData();
    }, []);

	return (
		<>
			<div>
				<div id='map'></div>
				<div className='route-options'>
					<RouteInfo bestRoutes={bestRoutes} />
				</div>
			</div>
		</>
	);
};

export default BestRoutes;